---
# title: role-ad-join-ssh-ldap
# Author: Your Name
# Version: 1.0
# File: tasks/ubuntu-2204-amd64-member.yml
#
# Description: Join a server to an Active Directory domain (realmd/samba)
#              and configure SSH to retrieve public keys from AD via LDAP.

- name: "Check if role was already executed"
  stat:
    path: /etc/ansible/flags/ansible_ad_join_installed
  register: role_flag

- name: "Stop if role is already installed"
  fail:
    msg: "Role is already installed"
  when:
    - role_flag.stat.exists

- name: "Check Samba server role"
  shell: testparm -s | grep 'server role'
  register: server_role
  changed_when: false

- name: "Fail if server is a Domain Controller"
  fail:
    msg: "This host is a Domain Controller. Operation aborted."
  when: "'active directory domain controller' in server_role.stdout"

- name: "Install CA certificates"
  apt:
    name: ca-certificates
    state: present
    update_cache: yes

- name: "Copy CA certificate to /usr/local/share/ca-certificates"
  copy:
    src: "{{ tls_ca_cert }}"
    dest: /usr/local/share/ca-certificates/{{ tls_ca_cert | basename }}
    mode: '0644'
    remote_src: false

- name: "Update CA certificates"
  command: update-ca-certificates
  args:
    creates: /etc/ssl/certs/{{ tls_ca_cert | basename }}

- name: "Set hostname"
  command: hostnamectl set-hostname "{{ smb_netbios_name | lower() }}.{{ smb_realm | lower() }}"

- name: "Install dependencies for realmd, samba, and other tools"
  apt:
    name:
      - realmd
      - samba
      - samba-common-bin
      - chrony
    update_cache: yes
    state: present

- name: "Configure NTP servers"
  lineinfile:
    path: /etc/chrony/chrony.conf
    insertafter: '^# Use servers from the NTP Pool Project.*'
    line: |
      server {{ primary_ntp }} iburst
      server {{ secondary_ntp }} iburst
  notify:
    - restart_ntp

- name: "Ensure NTP service is enabled and running"
  systemd:
    name: chrony
    enabled: true
    state: started

- name: "Restart NTP service"
  systemd:
    name: chrony
    state: restarted
  notify:
    - restart_ntp

- name: "Fix /etc/fstab to support ACL and extended attributes"
  replace:
    path: /etc/fstab
    regexp: 'errors=remount-ro\s+0'
    replace: 'user_xattr,acl,barrier=1,errors=remount-ro,relatime 0'
    backup: yes

- name: "Transfer resolv.conf.j2 to /etc/resolv.conf"
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    backup: yes

- name: "Discover domain"
  command: realm discover "{{ smb_realm }}"
  register: realm_discovery
  changed_when: false

- name: "Join the domain"
  command: >
    realm join --user="{{ smb_username }}"
    "{{ smb_realm }}"
    {% if ad_computer_ou_path is defined and ad_computer_ou_path|length > 0 %}
    --computer-ou="{{ ad_computer_ou_path }}"
    {% endif %}
    --membership-software=samba --client-software=winbind
    --computer-name="{{ smb_netbios_name | default(inventory_hostname_short.upper()) }}"
  args:
    stdin: "{{ smb_password }}"
  when: realm_discovery.rc == 0

- name: "Create LDAP public key retrieval script"
  copy:
    dest: /usr/local/bin/ad_ssh_key_retriever
    mode: '0755'
    content: |
      #!/usr/bin/env bash
      # Script to query AD via LDAP (with Kerberos) for sshPublicKey attribute.
      # This assumes the machine is joined to the domain and can use GSSAPI.
      USERNAME="$1"
      # Adjust the base DN and filter for your environment:
      BASE_DN="{{ ldap_base_dn | default('DC=example,DC=com') }}"
      /usr/bin/kinit -k -t /etc/krb5.keytab "host/$(hostname -f)" 2>/dev/null
      /usr/bin/ldapsearch -LLL -Y GSSAPI -b "$BASE_DN" \
        "(&(objectCategory=Person)(sAMAccountName=$USERNAME))" sshPublicKey \
      | sed -n '/^ /{H;d};/sshPublicKey:/x;$g;s/\n *//g;s/sshPublicKey: //gp'

- name: "Configure sshd_config to use LDAP retrieval script"
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?AuthorizedKeysCommand '
    line: 'AuthorizedKeysCommand /usr/local/bin/ad_ssh_key_retriever'
  notify:
    - restart_ssh

- name: "Set user for AuthorizedKeysCommand"
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?AuthorizedKeysCommandUser '
    line: 'AuthorizedKeysCommandUser nobody'
  notify:
    - restart_ssh

- name: "Harden SSH - disable root login"
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: 'PermitRootLogin no'
  notify:
    - restart_ssh

- name: "Harden SSH - disable password authentication (optional)"
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    line: 'PasswordAuthentication no'
  notify:
    - restart_ssh

# === Added Steps to Address Bug #1980246 ===
- name: "Transfer ns-switch.conf to /etc/nsswitch.conf"
  template:
    src: "nsswitch.conf.j2"
    dest: "/etc/nsswitch.conf"
    backup: yes

- name: "Update PAM for make home directory"
  command: pam-auth-update --enable mkhomedir

- name: "Make flag directory"
  ansible.builtin.file:
    path: /etc/ansible/flags
    state: directory
    mode: 0775
    recurse: yes

- name: "Create installed flag"
  file:
    path: /etc/ansible/flags/ansible_ad_join_installed
    state: touch
    mode: '0644'